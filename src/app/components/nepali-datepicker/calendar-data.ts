export interface NepaliMonthData {
  [key: number]: number[];
}

const START_ENGLISH_DATE = '1943-04-14';
const START_NEPALI_DATE = '2000-01-01';
const MIN_YEAR_BS = 2000;
const MAX_YEAR_BS = 2090;

export const nepaliMonthData: NepaliMonthData = {
  "2000":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2001":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2002":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2003":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2004":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2005":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2006":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2007":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2008":[31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
  "2009":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2010":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2011":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2012":[31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  "2013":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2014":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2015":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2016":[31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  "2017":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2018":[31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2019":[31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2020":[31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  "2021":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2022":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  "2023":[31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2024":[31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  "2025":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2026":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2027":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2028":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2029":[31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
  "2030":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2031":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2032":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2033":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2034":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2035":[30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
  "2036":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2037":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2038":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2039":[31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  "2040":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2041":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2042":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2043":[31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  "2044":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2045":[31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2046":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2047":[31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  "2048":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2049":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  "2050":[31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2051":[31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  "2052":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2053":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  "2054":[31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2055":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2056":[31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
  "2057":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2058":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2059":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2060":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2061":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2062":[30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
  "2063":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2064":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2065":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2066":[31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
  "2067":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2068":[31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2069":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2070":[31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  "2071":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2072":[31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2073":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  "2074":[31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  "2075":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2076":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  "2077":[31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2078":[31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  "2079":[31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  "2080":[31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  "2081":[31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  "2082":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
  "2083":[31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
  "2084":[31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
  "2085":[31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],
  "2086":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
  "2087":[31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
  "2088":[30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
  "2089":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
  "2090":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
  "2091":[31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
  "2092":[30, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],
  "2093":[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
  "2094":[31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
  "2095":[31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30],
  "2096":[30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  "2097":[31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
  "2098":[31, 31, 32, 31, 31, 31, 29, 30, 29, 30, 29, 31],
  "2099":[31, 31, 32, 31, 31, 31, 30, 29, 29, 30, 30, 30]

};

export const formattedDate=(year: number,month: number,day: number)=>{
  return `${year}-${month.toString().padStart(2,'0')}-${day.toString().padStart(2,'0')}`;
};

export const adToBs=(adDate: string)=> {
	const startDate = new Date(START_ENGLISH_DATE);
	const today = new Date(adDate);
	const daysDifference = Math.floor((today.getTime() - startDate.getTime()) / 86400000);
	if (daysDifference < 0) {
		throw new Error("Date Out of Range");
	}
  console.log(daysDifference,'daysdiff');

	return evaluateNepaliDate(daysDifference);
}

export const bsToAd=(selectedDate: string) =>{

	const [year, month, day] = selectedDate.split('-').map(Number);

	let daysDiff = 0;
	for (let i = MIN_YEAR_BS; i <= year; i++) {
		if (i === year) {
			for (let j = 1; j < month; j++) {
				daysDiff += nepaliMonthData[i][j-1];
			}
			daysDiff += day - 1;
		} else {
			for (let j = 1; j <= 12; j++) {
				daysDiff += nepaliMonthData[i][j-1];
			}
		}
	}
	return evaluateEnglishDate(START_ENGLISH_DATE, daysDiff);
}

export const isValidNepaliDate = (date: string): boolean => {
  const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
  if (!dateRegex.test(date)) return false;

  const [year, month, day] = date.split('-').map(Number);
  return (
    year >= MIN_YEAR_BS &&
    month >= 1 && month <= 12 &&
    day >= 1 && day <= getDaysInNepaliMonth(year, month)
  );
};

const  evaluateEnglishDate=(date: string, days: number): string =>{
	const result = new Date(date);
	result.setDate(result.getDate() + days);
	const year = result.getFullYear();
	const month = result.getMonth() + 1;
	const day = result.getDate();
	return formattedDate(year, month, day);
}

const evaluateNepaliDate=(daysElpased: number, format = true): string   => {
	let currentYear = 0;
	let currentMonth = 0;
	let currentDay = 0;
	let totalD = 0;
	let flag = false;
	for (let i = MIN_YEAR_BS; i <= MAX_YEAR_BS; i++) {
		if (flag) {
			break;
		}
		for (let j = 1; j <= 12; j++) {
			totalD += nepaliMonthData[i][j-1];
			if (daysElpased - totalD < 0) {
				currentDay = daysElpased - totalD + nepaliMonthData[i][j-1] + 1;
				flag = true;
				currentYear = i;
				currentMonth = j;
				break;
			}
		}
	}

  return formattedDate(currentYear, currentMonth, currentDay);
}

export const getCurrentBS=()=>{
  const today = new Date();
  const formattedToday = formattedDate(today.getFullYear(), today.getMonth() + 1, today.getDate());
  console.log(formattedToday);

  return adToBs(formattedToday);
}

export function getDaysInNepaliMonth(year: number, month: number): number {
  if (nepaliMonthData[year] && month >= 1 && month <= 12) {
    return nepaliMonthData[year][month - 1];
  }
  return 30; // Default fallback
}

export const nepaliMonths = [
  'वैशाख', 'जेठ', 'असार', 'श्रावण', 'भदौ', 'असोज',
  'कार्तिक', 'मंसिर', 'पुष', 'माघ', 'फाल्गुन', 'चैत्र'
];

export const nepaliDaysOfWeek = [
  'आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'
];
